version = "0.2.0"
group = "uk.co.ribot"

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.dcendents:android-maven-plugin:1.0'
        classpath 'org.robolectric.gradle:gradle-android-test-plugin:0.9.+'
    }
}

apply plugin: 'android-library'
apply plugin: 'android-maven'
apply plugin: 'android-test'
apply plugin: 'maven'
apply plugin: 'signing'

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 18
        versionCode 1
        versionName "1.0"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.google.code.gson:gson:2.2.4'

    androidTestCompile 'junit:junit:4.10'
    androidTestCompile 'org.robolectric:robolectric:2.1.+'
}

android.libraryVariants.all { variant ->
    task("generateApiDocs${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        exclude '**/PigApplication.java'
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}


task androidJavadocs(type: Javadoc) {
    options.links("http://docs.oracle.com/javase/7/docs/api/");
    source = android.sourceSets.main.allJava
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.allSource
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

configurations {
    archives {
        extendsFrom configurations.default
    }
}

signing {
    required { has("release") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

//Generates JAR file when building
android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.BuilderConstants.DEBUG)) {
        return;
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    artifacts.add('archives', task);
}

//Publishing config for Sonatype central
def sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
def sonatypeUsername = ""
def sonatypePassword = ""
try {
    sonatypeUsername = sonatypeUsernameLocal
    sonatypePassword = sonatypePasswordLocal
} catch (MissingPropertyException) {
    println "Note: Sonatype credentials not found in your local properties"
}

uploadArchives {
    configuration = configurations.archives
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: sonatypeRepositoryUrl) {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        pom.project {
            name 'Pig'
            packaging 'aar'
            description 'Pig aims to be the bridge in the middle of your native mobile UI and a some shared JavaScript business logic.'
            url 'https://github.com/ribot/pig'

            scm {
                url 'git@github.com:ribot/pig.git'
                connection 'scm:git:git@github.com:ribot/pig.git'
                developerConnection 'scm:git:git@github.com:ribot/pig.git'
            }

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'matt'
                    name 'Matt Oakes'
                    email 'matt@ribot.co.uk'
                }
            }
        }
    }
}

